
package neel.kanth.api;

import java.io.IOException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import neel.kanth.entity.EntityFileName;
import neel.kanth.repo.RepoEntityFileName;

@RestController
@RequestMapping(value="/fortune")
public class ControlPostData {
    
    @GetMapping("/free")
    public String returnFree() {
	return "free";
    }
    
    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping(value = {"/addpost","/create","/createpost"})
    public String postData() {
	return "postAdded";
    }
    
    
    @Autowired
    private RepoEntityFileName repoFile;
    
    @PostMapping("/img")
    public String strImage(@RequestParam(name="file")MultipartFile multipartFile) throws IOException {
	EntityFileName fileName =new EntityFileName();
	fileName.setFileName(multipartFile.getOriginalFilename());
	fileName.setFileType(multipartFile.getContentType());
	fileName.setFile(multipartFile.getBytes());
	repoFile.save(fileName);
	/*
	repoFile.save(
		EntityFileName.builder()
			.fileName(multipartFile.getOriginalFilename())
			.fileType(multipartFile.getContentType())
			.imageData(UtilImage.compressImage(multipartFile.getBytes())).build()
			);*/
	
	return "fuck";
    }
    
    @GetMapping("/getimg")
    public ResponseEntity<?> returnList(@RequestParam("file") String name){
	
	 Optional<EntityFileName> fileEntityOptional = repoFile.findById(3L);
	        if (fileEntityOptional.isPresent()) {
	            EntityFileName fileEntity = fileEntityOptional.get();
	            
	            // Prepare the response entity
	            HttpHeaders headers = new HttpHeaders();
	            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
	            headers.setContentDispositionFormData("attachment", fileEntity.getFileName());
	            
	            // Create a ByteArrayResource from the file data
	            ByteArrayResource resource = new ByteArrayResource(fileEntity.getFile());
	            
	            // Return ResponseEntity with the resource and headers
	            return ResponseEntity.ok()
	                    .headers(headers)
	                    .contentLength(fileEntity.getFile().length)
	                    .body(resource);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	
    }

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
package neel.kanth.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
@NoArgsConstructor
@AllArgsConstructor
@Data
@Entity 
@Table(name="file")
@Builder
public class EntityFileName {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String fileName;
    
    private String fileType;
    
    @Lob
    @Column(name="file_",length = 1000000)
    private byte[] file;
    
}
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>neel.kanth</groupId>
	<artifactId>Fortuner</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Fortuner</name>
	<description>Fortuner</description>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
